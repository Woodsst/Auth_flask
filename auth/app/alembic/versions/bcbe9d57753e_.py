"""empty message

Revision ID: bcbe9d57753e
Revises: 419da2b6e21f
Create Date: 2022-11-10 21:45:01.364642

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "bcbe9d57753e"
down_revision = "419da2b6e21f"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "login_history",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "event_type",
            sa.Enum(
                "KeyPress",
                "Key",
                "KeyRelease",
                "ButtonPress",
                "Button",
                "ButtonRelease",
                "Motion",
                "Enter",
                "Leave",
                "FocusIn",
                "FocusOut",
                "Keymap",
                "Expose",
                "GraphicsExpose",
                "NoExpose",
                "Visibility",
                "Create",
                "Destroy",
                "Unmap",
                "Map",
                "MapRequest",
                "Reparent",
                "Configure",
                "ConfigureRequest",
                "Gravity",
                "ResizeRequest",
                "Circulate",
                "CirculateRequest",
                "Property",
                "SelectionClear",
                "SelectionRequest",
                "Selection",
                "Colormap",
                "ClientMessage",
                "Mapping",
                "VirtualEvent",
                "Activate",
                "Deactivate",
                "MouseWheel",
                name="eventtype",
            ),
            nullable=True,
        ),
        sa.Column("user_agent", sa.String(), nullable=True),
        sa.Column(
            "device_type",
            sa.Enum("PC", "MOBILE", name="devicetype"),
            nullable=False,
        ),
        sa.Column("login_ip", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", "device_type"),
        sa.UniqueConstraint("id", "device_type"),
        postgresql_partition_by="LIST (device_type)",
    )
    op.create_table(
        "login_history_mobile",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "event_type",
            sa.Enum(
                "KeyPress",
                "Key",
                "KeyRelease",
                "ButtonPress",
                "Button",
                "ButtonRelease",
                "Motion",
                "Enter",
                "Leave",
                "FocusIn",
                "FocusOut",
                "Keymap",
                "Expose",
                "GraphicsExpose",
                "NoExpose",
                "Visibility",
                "Create",
                "Destroy",
                "Unmap",
                "Map",
                "MapRequest",
                "Reparent",
                "Configure",
                "ConfigureRequest",
                "Gravity",
                "ResizeRequest",
                "Circulate",
                "CirculateRequest",
                "Property",
                "SelectionClear",
                "SelectionRequest",
                "Selection",
                "Colormap",
                "ClientMessage",
                "Mapping",
                "VirtualEvent",
                "Activate",
                "Deactivate",
                "MouseWheel",
                name="eventtype",
            ),
            nullable=True,
        ),
        sa.Column("user_agent", sa.String(), nullable=True),
        sa.Column(
            "device_type",
            sa.Enum("PC", "MOBILE", name="devicetype"),
            nullable=False,
        ),
        sa.Column("login_ip", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", "device_type"),
        sa.UniqueConstraint("id", "device_type"),
    )
    op.create_table(
        "login_history_pc",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "event_type",
            sa.Enum(
                "KeyPress",
                "Key",
                "KeyRelease",
                "ButtonPress",
                "Button",
                "ButtonRelease",
                "Motion",
                "Enter",
                "Leave",
                "FocusIn",
                "FocusOut",
                "Keymap",
                "Expose",
                "GraphicsExpose",
                "NoExpose",
                "Visibility",
                "Create",
                "Destroy",
                "Unmap",
                "Map",
                "MapRequest",
                "Reparent",
                "Configure",
                "ConfigureRequest",
                "Gravity",
                "ResizeRequest",
                "Circulate",
                "CirculateRequest",
                "Property",
                "SelectionClear",
                "SelectionRequest",
                "Selection",
                "Colormap",
                "ClientMessage",
                "Mapping",
                "VirtualEvent",
                "Activate",
                "Deactivate",
                "MouseWheel",
                name="eventtype",
            ),
            nullable=True,
        ),
        sa.Column("user_agent", sa.String(), nullable=True),
        sa.Column(
            "device_type",
            sa.Enum("PC", "MOBILE", name="devicetype"),
            nullable=False,
        ),
        sa.Column("login_ip", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", "device_type"),
        sa.UniqueConstraint("id"),
    )
    op.create_unique_constraint(None, "users", ["id"])

    from storages.postgres.db_models import (
        PARTITION_TABLES_REGISTRY,
        create_table_login_history_partition_ddl,
    )

    for table_class, device_type in PARTITION_TABLES_REGISTRY:
        ddl = create_table_login_history_partition_ddl(
            table_class.__table__, device_type
        )
        ddl(target=None, bind=op.get_bind())
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "users", type_="unique")
    op.drop_table("login_history_pc")
    op.drop_table("login_history_mobile")
    op.drop_table("login_history")
    # ### end Alembic commands ###

    from storages.postgres.db_models import (
        PARTITION_TABLES_REGISTRY,
        create_table_login_history_partition_ddl,
    )

    for table_class, device_type in PARTITION_TABLES_REGISTRY:
        ddl = create_table_login_history_partition_ddl(
            table_class.__table__, device_type
        )
        ddl(target=None, bind=op.get_bind())
